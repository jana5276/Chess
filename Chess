class ChessGame:
    def __init__(self):
        self.board = self.create_board()
        self.current_player = 'white'

    def create_board(self):
        board = []
        for _ in range(8):
            board.append([' '] * 8)
        board[0] = ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']
        board[1] = ['P'] * 8
        board[6] = ['p'] * 8
        board[7] = ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']
        return board

    def print_board(self):
        for row in self.board:
            print(' '.join(row))

    def is_valid_move(self, start, end):
        # Implement move validation logic here
        return True

    def make_move(self, start, end):
        if self.is_valid_move(start, end):
            self.board[end[0]][end[1]] = self.board[start[0]][start[1]]
            self.board[start[0]][start[1]] = ' '
            self.current_player = 'black' if self.current_player == 'white' else 'white'
        else:
            print("Invalid move. Try again.")

    def play(self):
        while True:
            self.print_board()
            print(f"It's {self.current_player}'s turn.")
            start = input("Enter the start position (row col): ").split()
            end = input("Enter the end position (row col): ").split()
            start = [int(x) for x in start]
            end = [int(x) for x in end]
            self.make_move(start, end)

            # Implement game end conditions here
            # if game_over:
            #     print("Game over!")
            #     break


if __name__ == "__main__":
    game = ChessGame()
    game.play()
